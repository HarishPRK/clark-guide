{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\haris\\\\clark-guide\\\\clark-chatbox\\\\frontend\\\\src\\\\pages\\\\Chat.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Box, Typography, TextField, Button, Paper, List, ListItem, AppBar, Toolbar, IconButton, Drawer, Divider, Chip, Container, Grid } from '@mui/material';\nimport SendIcon from '@mui/icons-material/Send';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport SchoolIcon from '@mui/icons-material/School';\nimport WorkIcon from '@mui/icons-material/Work';\nimport PersonIcon from '@mui/icons-material/Person';\nimport LocalLibraryIcon from '@mui/icons-material/LocalLibrary';\nimport CreditCardIcon from '@mui/icons-material/CreditCard';\nimport EventIcon from '@mui/icons-material/Event';\nimport DirectionsBusIcon from '@mui/icons-material/DirectionsBus';\nimport PlaceIcon from '@mui/icons-material/Place';\n\n// Import user context\nimport { useUser } from '../contexts/UserContext';\n\n// Mock chat service (would connect to real backend in production)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mockChatResponse = async (message, userType) => {\n  // Simulate network delay\n  await new Promise(resolve => setTimeout(resolve, 1000));\n\n  // Simple response patterns\n  if (message.toLowerCase().includes('hello') || message.toLowerCase().includes('hi')) {\n    return `Hello! I'm Clark AI, your ${userType} assistant. How can I help you today?`;\n  }\n  if (message.toLowerCase().includes('course')) {\n    return 'You can find course information in the ClarkYou portal. Would you like me to provide more details about specific courses?';\n  }\n  if (message.toLowerCase().includes('library')) {\n    return 'The Goddard Library is open Monday-Friday 8am-10pm, Saturday 10am-8pm, and Sunday 10am-10pm. Do you need directions or have specific questions about library services?';\n  }\n  if (message.toLowerCase().includes('onecard')) {\n    return 'Your OneCard is your official Clark University ID card. You can manage your OneCard account at onecard.clarku.edu. If you\\'ve lost your card, you can request a replacement at the OneCard office.';\n  }\n  if (message.toLowerCase().includes('appointment')) {\n    return 'I can help you schedule an appointment with various departments. Which department would you like to schedule with?';\n  }\n  if (message.toLowerCase().includes('clark')) {\n    return 'Clark University is a private research university in Worcester, Massachusetts, founded in 1887. Is there something specific about Clark you\\'d like to know?';\n  }\n\n  // Default response\n  return 'I understand you\\'re asking about something important. I\\'m still learning, so please provide more details about what you need help with.';\n};\n\n// Message interface\n\nconst Chat = () => {\n  _s();\n  const navigate = useNavigate();\n  const {\n    user,\n    startNewSession\n  } = useUser();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const messagesEndRef = useRef(null);\n\n  // Check if user is set\n  useEffect(() => {\n    if (!user) {\n      navigate('/');\n      return;\n    }\n\n    // Add welcome message\n    const welcomeMessage = {\n      id: Date.now().toString(),\n      text: getWelcomeMessage(user.type),\n      sender: 'ai',\n      timestamp: new Date()\n    };\n    setMessages([welcomeMessage]);\n  }, [user, navigate]);\n\n  // Scroll to bottom when messages change\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n\n  // Get welcome message based on user type\n  const getWelcomeMessage = type => {\n    switch (type) {\n      case 'student':\n        return 'Welcome to Clark AI! I can help you with course information, campus resources, ClarkYou credentials, OneCard queries, appointment scheduling, and more. What can I assist you with today?';\n      case 'faculty':\n        return 'Welcome to Clark AI! I can help you with campus resources, course schedules, and other faculty services. How can I assist you today?';\n      case 'other':\n        return 'Welcome to Clark AI! I can provide information about commuter options, places near Clark, and general university information. What would you like to know?';\n      default:\n        return 'Welcome to Clark AI! How can I help you today?';\n    }\n  };\n\n  // Send a message\n  const sendMessage = async () => {\n    if (!input.trim() || !user) return;\n\n    // Add user message\n    const userMessage = {\n      id: Date.now().toString(),\n      text: input.trim(),\n      sender: 'user',\n      timestamp: new Date()\n    };\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n    setInput('');\n    setIsTyping(true);\n    try {\n      // Get AI response (via mock function for now)\n      const response = await mockChatResponse(input.trim(), user.type);\n\n      // Add AI response\n      const aiMessage = {\n        id: (Date.now() + 1).toString(),\n        text: response,\n        sender: 'ai',\n        timestamp: new Date()\n      };\n      setMessages(prevMessages => [...prevMessages, aiMessage]);\n    } catch (error) {\n      console.error('Error getting chat response:', error);\n\n      // Add error message\n      const errorMessage = {\n        id: (Date.now() + 1).toString(),\n        text: \"I'm sorry, I encountered an error. Please try again.\",\n        sender: 'ai',\n        timestamp: new Date()\n      };\n      setMessages(prevMessages => [...prevMessages, errorMessage]);\n    } finally {\n      setIsTyping(false);\n    }\n  };\n\n  // Handle Enter key\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      sendMessage();\n    }\n  };\n\n  // Handle preset message selection\n  const handlePresetMessage = message => {\n    setInput(message);\n    setDrawerOpen(false);\n  };\n\n  // Get preset messages based on user type\n  const getPresetMessages = () => {\n    switch (user === null || user === void 0 ? void 0 : user.type) {\n      case 'student':\n        return [{\n          category: 'Courses',\n          messages: ['How do I register for classes?', 'What courses are available for next semester?', 'Where can I find my course schedule?']\n        }, {\n          category: 'Campus Resources',\n          messages: ['What are the library hours?', 'Where is the Kneller Athletic Center?', 'How do I reserve a study room?']\n        }, {\n          category: 'ClarkYou Credentials',\n          messages: ['I forgot my ClarkYou password', 'How do I access my email?', 'Where do I find my student records?']\n        }, {\n          category: 'OneCard',\n          messages: ['I lost my OneCard', 'How do I add money to my OneCard?', 'Where can I use my OneCard?']\n        }, {\n          category: 'Appointments',\n          messages: ['How do I schedule an appointment with an advisor?', 'I need to meet with a professor', 'Where is the health center?']\n        }];\n      case 'faculty':\n        return [{\n          category: 'Campus Resources',\n          messages: ['What are the library hours?', 'How do I access research databases?', 'Where can I book rooms for events?']\n        }, {\n          category: 'Course Schedules',\n          messages: ['How do I submit grades?', 'Where can I access the academic calendar?', 'How do I set up my course in Moodle?']\n        }];\n      case 'other':\n        return [{\n          category: 'Commuter Options',\n          messages: ['How do I use the Transloc app?', 'Where can I find MBTA schedules?', 'Is there a shuttle to the train station?']\n        }, {\n          category: 'Places Near Clark',\n          messages: ['What restaurants are near campus?', 'Where is the nearest grocery store?', 'Are there any coffee shops nearby?']\n        }];\n      default:\n        return [];\n    }\n  };\n\n  // Render user icon based on type\n  const getUserIcon = () => {\n    switch (user === null || user === void 0 ? void 0 : user.type) {\n      case 'student':\n        return /*#__PURE__*/_jsxDEV(SchoolIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 16\n        }, this);\n      case 'faculty':\n        return /*#__PURE__*/_jsxDEV(WorkIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 16\n        }, this);\n      case 'other':\n        return /*#__PURE__*/_jsxDEV(PersonIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 16\n        }, this);\n      default:\n        return /*#__PURE__*/_jsxDEV(PersonIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 16\n        }, this);\n    }\n  };\n\n  // Render category icon\n  const getCategoryIcon = category => {\n    if (category.includes('Course')) return /*#__PURE__*/_jsxDEV(SchoolIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 45\n    }, this);\n    if (category.includes('Library') || category.includes('Campus')) return /*#__PURE__*/_jsxDEV(LocalLibraryIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 77\n    }, this);\n    if (category.includes('OneCard')) return /*#__PURE__*/_jsxDEV(CreditCardIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 46\n    }, this);\n    if (category.includes('Appointment')) return /*#__PURE__*/_jsxDEV(EventIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 50\n    }, this);\n    if (category.includes('Commuter')) return /*#__PURE__*/_jsxDEV(DirectionsBusIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 47\n    }, this);\n    if (category.includes('Places')) return /*#__PURE__*/_jsxDEV(PlaceIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 45\n    }, this);\n    return /*#__PURE__*/_jsxDEV(SchoolIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 12\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      display: 'flex',\n      flexDirection: 'column',\n      height: '100vh'\n    },\n    children: [/*#__PURE__*/_jsxDEV(AppBar, {\n      position: \"static\",\n      children: /*#__PURE__*/_jsxDEV(Toolbar, {\n        children: [/*#__PURE__*/_jsxDEV(IconButton, {\n          edge: \"start\",\n          color: \"inherit\",\n          \"aria-label\": \"menu\",\n          onClick: () => setDrawerOpen(true),\n          sx: {\n            mr: 2\n          },\n          children: /*#__PURE__*/_jsxDEV(MenuIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          component: \"div\",\n          sx: {\n            flexGrow: 1\n          },\n          children: \"Clark University AI Chatbox\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n          color: \"inherit\",\n          \"aria-label\": \"back to welcome\",\n          onClick: () => navigate('/'),\n          children: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Drawer, {\n      anchor: \"left\",\n      open: drawerOpen,\n      onClose: () => setDrawerOpen(false),\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          width: 300,\n          p: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            alignItems: 'center',\n            mb: 2\n          },\n          children: [getUserIcon(), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            sx: {\n              ml: 1\n            },\n            children: user && user.type ? `${user.type.charAt(0).toUpperCase() + user.type.slice(1)} Services` : 'Services'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 335,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Divider, {\n          sx: {\n            mb: 2\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(List, {\n          children: getPresetMessages().map((category, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(ListItem, {\n              children: /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  display: 'flex',\n                  alignItems: 'center',\n                  mb: 1\n                },\n                children: [getCategoryIcon(category.category), /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"subtitle1\",\n                  fontWeight: \"bold\",\n                  sx: {\n                    ml: 1\n                  },\n                  children: category.category\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 348,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 346,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 345,\n              columnNumber: 17\n            }, this), category.messages.map((msg, idx) => /*#__PURE__*/_jsxDEV(ListItem, {\n              sx: {\n                pl: 4\n              },\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"text\",\n                color: \"primary\",\n                onClick: () => handlePresetMessage(msg),\n                sx: {\n                  justifyContent: 'flex-start',\n                  textTransform: 'none'\n                },\n                children: msg\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 356,\n                columnNumber: 21\n              }, this)\n            }, idx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 355,\n              columnNumber: 19\n            }, this)), index < getPresetMessages().length - 1 && /*#__PURE__*/_jsxDEV(Divider, {\n              sx: {\n                my: 1\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 368,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 344,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Divider, {\n          sx: {\n            my: 2\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          color: \"primary\",\n          fullWidth: true,\n          onClick: () => {\n            startNewSession();\n            setMessages([{\n              id: Date.now().toString(),\n              text: getWelcomeMessage((user === null || user === void 0 ? void 0 : user.type) || 'student'),\n              sender: 'ai',\n              timestamp: new Date()\n            }]);\n            setDrawerOpen(false);\n          },\n          children: \"Start New Chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        flex: 1,\n        p: 2,\n        overflowY: 'auto',\n        bgcolor: 'background.default'\n      },\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        maxWidth: \"md\",\n        children: [messages.map(message => /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            justifyContent: message.sender === 'user' ? 'flex-end' : 'flex-start',\n            mb: 2\n          },\n          children: /*#__PURE__*/_jsxDEV(Paper, {\n            elevation: 1,\n            sx: {\n              p: 2,\n              maxWidth: '80%',\n              borderRadius: 2,\n              bgcolor: message.sender === 'user' ? 'primary.main' : 'background.paper',\n              color: message.sender === 'user' ? 'white' : 'text.primary'\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body1\",\n              children: message.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 425,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"caption\",\n              color: message.sender === 'user' ? 'white' : 'text.secondary',\n              children: message.timestamp.toLocaleTimeString([], {\n                hour: '2-digit',\n                minute: '2-digit'\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 428,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 415,\n            columnNumber: 15\n          }, this)\n        }, message.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 407,\n          columnNumber: 13\n        }, this)), isTyping && /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            justifyContent: 'flex-start',\n            mb: 2\n          },\n          children: /*#__PURE__*/_jsxDEV(Paper, {\n            elevation: 1,\n            sx: {\n              p: 2,\n              borderRadius: 2\n            },\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              children: \"Clark AI is typing...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 438,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 437,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 436,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      component: \"form\",\n      onSubmit: e => {\n        e.preventDefault();\n        sendMessage();\n      },\n      sx: {\n        p: 2,\n        borderTop: 1,\n        borderColor: 'divider',\n        bgcolor: 'background.paper'\n      },\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        maxWidth: \"md\",\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 1,\n          alignItems: \"center\",\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: true,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              placeholder: \"Type your message here...\",\n              value: input,\n              onChange: e => setInput(e.target.value),\n              onKeyPress: handleKeyPress,\n              variant: \"outlined\",\n              multiline: true,\n              maxRows: 3\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 464,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 463,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              endIcon: /*#__PURE__*/_jsxDEV(SendIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 479,\n                columnNumber: 26\n              }, this),\n              onClick: sendMessage,\n              disabled: !input.trim() || isTyping,\n              children: \"Send\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 476,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 475,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 462,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mt: 1,\n            display: 'flex',\n            flexWrap: 'wrap',\n            gap: 1\n          },\n          children: [/*#__PURE__*/_jsxDEV(Chip, {\n            label: \"Hi Clark AI\",\n            variant: \"outlined\",\n            onClick: () => handlePresetMessage('Hi Clark AI'),\n            clickable: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 489,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Chip, {\n            label: \"Library hours\",\n            variant: \"outlined\",\n            onClick: () => handlePresetMessage('What are the library hours?'),\n            clickable: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 495,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Chip, {\n            label: \"OneCard help\",\n            variant: \"outlined\",\n            onClick: () => handlePresetMessage('I need help with my OneCard'),\n            clickable: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 501,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Chip, {\n            label: \"Course registration\",\n            variant: \"outlined\",\n            onClick: () => handlePresetMessage('How do I register for courses?'),\n            clickable: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 507,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 488,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 448,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 298,\n    columnNumber: 5\n  }, this);\n};\n_s(Chat, \"HQz4nAVr59kQBubMD7c2IEBwgyk=\", false, function () {\n  return [useNavigate, useUser];\n});\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useNavigate","Box","Typography","TextField","Button","Paper","List","ListItem","AppBar","Toolbar","IconButton","Drawer","Divider","Chip","Container","Grid","SendIcon","MenuIcon","ArrowBackIcon","SchoolIcon","WorkIcon","PersonIcon","LocalLibraryIcon","CreditCardIcon","EventIcon","DirectionsBusIcon","PlaceIcon","useUser","jsxDEV","_jsxDEV","mockChatResponse","message","userType","Promise","resolve","setTimeout","toLowerCase","includes","Chat","_s","navigate","user","startNewSession","messages","setMessages","input","setInput","isTyping","setIsTyping","drawerOpen","setDrawerOpen","messagesEndRef","welcomeMessage","id","Date","now","toString","text","getWelcomeMessage","type","sender","timestamp","_messagesEndRef$curre","current","scrollIntoView","behavior","sendMessage","trim","userMessage","prevMessages","response","aiMessage","error","console","errorMessage","handleKeyPress","e","key","shiftKey","preventDefault","handlePresetMessage","getPresetMessages","category","getUserIcon","fileName","_jsxFileName","lineNumber","columnNumber","getCategoryIcon","sx","display","flexDirection","height","children","position","edge","color","onClick","mr","variant","component","flexGrow","anchor","open","onClose","width","p","alignItems","mb","ml","charAt","toUpperCase","slice","map","index","Fragment","fontWeight","msg","idx","pl","justifyContent","textTransform","length","my","fullWidth","flex","overflowY","bgcolor","maxWidth","elevation","borderRadius","toLocaleTimeString","hour","minute","ref","onSubmit","borderTop","borderColor","container","spacing","item","xs","placeholder","value","onChange","target","onKeyPress","multiline","maxRows","endIcon","disabled","mt","flexWrap","gap","label","clickable","_c","$RefreshReg$"],"sources":["C:/Users/haris/clark-guide/clark-chatbox/frontend/src/pages/Chat.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { \r\n  Box, \r\n  Typography, \r\n  TextField, \r\n  Button, \r\n  Paper, \r\n  List, \r\n  ListItem,\r\n  AppBar,\r\n  Toolbar,\r\n  IconButton,\r\n  Drawer,\r\n  Divider,\r\n  Chip,\r\n  Container,\r\n  Grid\r\n} from '@mui/material';\r\nimport SendIcon from '@mui/icons-material/Send';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\nimport SchoolIcon from '@mui/icons-material/School';\r\nimport WorkIcon from '@mui/icons-material/Work';\r\nimport PersonIcon from '@mui/icons-material/Person';\r\nimport LocalLibraryIcon from '@mui/icons-material/LocalLibrary';\r\nimport CreditCardIcon from '@mui/icons-material/CreditCard';\r\nimport EventIcon from '@mui/icons-material/Event';\r\nimport DirectionsBusIcon from '@mui/icons-material/DirectionsBus';\r\nimport PlaceIcon from '@mui/icons-material/Place';\r\n\r\n// Import user context\r\nimport { useUser, UserType } from '../contexts/UserContext';\r\n\r\n// Mock chat service (would connect to real backend in production)\r\nconst mockChatResponse = async (message: string, userType: UserType): Promise<string> => {\r\n  // Simulate network delay\r\n  await new Promise(resolve => setTimeout(resolve, 1000));\r\n  \r\n  // Simple response patterns\r\n  if (message.toLowerCase().includes('hello') || message.toLowerCase().includes('hi')) {\r\n    return `Hello! I'm Clark AI, your ${userType} assistant. How can I help you today?`;\r\n  }\r\n  \r\n  if (message.toLowerCase().includes('course')) {\r\n    return 'You can find course information in the ClarkYou portal. Would you like me to provide more details about specific courses?';\r\n  }\r\n  \r\n  if (message.toLowerCase().includes('library')) {\r\n    return 'The Goddard Library is open Monday-Friday 8am-10pm, Saturday 10am-8pm, and Sunday 10am-10pm. Do you need directions or have specific questions about library services?';\r\n  }\r\n  \r\n  if (message.toLowerCase().includes('onecard')) {\r\n    return 'Your OneCard is your official Clark University ID card. You can manage your OneCard account at onecard.clarku.edu. If you\\'ve lost your card, you can request a replacement at the OneCard office.';\r\n  }\r\n  \r\n  if (message.toLowerCase().includes('appointment')) {\r\n    return 'I can help you schedule an appointment with various departments. Which department would you like to schedule with?';\r\n  }\r\n  \r\n  if (message.toLowerCase().includes('clark')) {\r\n    return 'Clark University is a private research university in Worcester, Massachusetts, founded in 1887. Is there something specific about Clark you\\'d like to know?';\r\n  }\r\n  \r\n  // Default response\r\n  return 'I understand you\\'re asking about something important. I\\'m still learning, so please provide more details about what you need help with.';\r\n};\r\n\r\n// Message interface\r\ninterface ChatMessage {\r\n  id: string;\r\n  text: string;\r\n  sender: 'user' | 'ai';\r\n  timestamp: Date;\r\n}\r\n\r\nconst Chat: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const { user, startNewSession } = useUser();\r\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\r\n  const [input, setInput] = useState('');\r\n  const [isTyping, setIsTyping] = useState(false);\r\n  const [drawerOpen, setDrawerOpen] = useState(false);\r\n  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n  \r\n  // Check if user is set\r\n  useEffect(() => {\r\n    if (!user) {\r\n      navigate('/');\r\n      return;\r\n    }\r\n\r\n    // Add welcome message\r\n    const welcomeMessage: ChatMessage = {\r\n      id: Date.now().toString(),\r\n      text: getWelcomeMessage(user.type),\r\n      sender: 'ai',\r\n      timestamp: new Date()\r\n    };\r\n    \r\n    setMessages([welcomeMessage]);\r\n  }, [user, navigate]);\r\n\r\n  // Scroll to bottom when messages change\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, [messages]);\r\n\r\n  // Get welcome message based on user type\r\n  const getWelcomeMessage = (type: UserType): string => {\r\n    switch (type) {\r\n      case 'student':\r\n        return 'Welcome to Clark AI! I can help you with course information, campus resources, ClarkYou credentials, OneCard queries, appointment scheduling, and more. What can I assist you with today?';\r\n      case 'faculty':\r\n        return 'Welcome to Clark AI! I can help you with campus resources, course schedules, and other faculty services. How can I assist you today?';\r\n      case 'other':\r\n        return 'Welcome to Clark AI! I can provide information about commuter options, places near Clark, and general university information. What would you like to know?';\r\n      default:\r\n        return 'Welcome to Clark AI! How can I help you today?';\r\n    }\r\n  };\r\n\r\n  // Send a message\r\n  const sendMessage = async () => {\r\n    if (!input.trim() || !user) return;\r\n    \r\n    // Add user message\r\n    const userMessage: ChatMessage = {\r\n      id: Date.now().toString(),\r\n      text: input.trim(),\r\n      sender: 'user',\r\n      timestamp: new Date()\r\n    };\r\n    \r\n    setMessages(prevMessages => [...prevMessages, userMessage]);\r\n    setInput('');\r\n    setIsTyping(true);\r\n    \r\n    try {\r\n      // Get AI response (via mock function for now)\r\n      const response = await mockChatResponse(input.trim(), user.type);\r\n      \r\n      // Add AI response\r\n      const aiMessage: ChatMessage = {\r\n        id: (Date.now() + 1).toString(),\r\n        text: response,\r\n        sender: 'ai',\r\n        timestamp: new Date()\r\n      };\r\n      \r\n      setMessages(prevMessages => [...prevMessages, aiMessage]);\r\n    } catch (error) {\r\n      console.error('Error getting chat response:', error);\r\n      \r\n      // Add error message\r\n      const errorMessage: ChatMessage = {\r\n        id: (Date.now() + 1).toString(),\r\n        text: \"I'm sorry, I encountered an error. Please try again.\",\r\n        sender: 'ai',\r\n        timestamp: new Date()\r\n      };\r\n      \r\n      setMessages(prevMessages => [...prevMessages, errorMessage]);\r\n    } finally {\r\n      setIsTyping(false);\r\n    }\r\n  };\r\n\r\n  // Handle Enter key\r\n  const handleKeyPress = (e: React.KeyboardEvent) => {\r\n    if (e.key === 'Enter' && !e.shiftKey) {\r\n      e.preventDefault();\r\n      sendMessage();\r\n    }\r\n  };\r\n\r\n  // Handle preset message selection\r\n  const handlePresetMessage = (message: string) => {\r\n    setInput(message);\r\n    setDrawerOpen(false);\r\n  };\r\n\r\n  // Get preset messages based on user type\r\n  const getPresetMessages = (): { category: string; messages: string[] }[] => {\r\n    switch (user?.type) {\r\n      case 'student':\r\n        return [\r\n          {\r\n            category: 'Courses',\r\n            messages: [\r\n              'How do I register for classes?',\r\n              'What courses are available for next semester?',\r\n              'Where can I find my course schedule?'\r\n            ]\r\n          },\r\n          {\r\n            category: 'Campus Resources',\r\n            messages: [\r\n              'What are the library hours?',\r\n              'Where is the Kneller Athletic Center?',\r\n              'How do I reserve a study room?'\r\n            ]\r\n          },\r\n          {\r\n            category: 'ClarkYou Credentials',\r\n            messages: [\r\n              'I forgot my ClarkYou password',\r\n              'How do I access my email?',\r\n              'Where do I find my student records?'\r\n            ]\r\n          },\r\n          {\r\n            category: 'OneCard',\r\n            messages: [\r\n              'I lost my OneCard',\r\n              'How do I add money to my OneCard?',\r\n              'Where can I use my OneCard?'\r\n            ]\r\n          },\r\n          {\r\n            category: 'Appointments',\r\n            messages: [\r\n              'How do I schedule an appointment with an advisor?',\r\n              'I need to meet with a professor',\r\n              'Where is the health center?'\r\n            ]\r\n          }\r\n        ];\r\n      case 'faculty':\r\n        return [\r\n          {\r\n            category: 'Campus Resources',\r\n            messages: [\r\n              'What are the library hours?',\r\n              'How do I access research databases?',\r\n              'Where can I book rooms for events?'\r\n            ]\r\n          },\r\n          {\r\n            category: 'Course Schedules',\r\n            messages: [\r\n              'How do I submit grades?',\r\n              'Where can I access the academic calendar?',\r\n              'How do I set up my course in Moodle?'\r\n            ]\r\n          }\r\n        ];\r\n      case 'other':\r\n        return [\r\n          {\r\n            category: 'Commuter Options',\r\n            messages: [\r\n              'How do I use the Transloc app?',\r\n              'Where can I find MBTA schedules?',\r\n              'Is there a shuttle to the train station?'\r\n            ]\r\n          },\r\n          {\r\n            category: 'Places Near Clark',\r\n            messages: [\r\n              'What restaurants are near campus?',\r\n              'Where is the nearest grocery store?',\r\n              'Are there any coffee shops nearby?'\r\n            ]\r\n          }\r\n        ];\r\n      default:\r\n        return [];\r\n    }\r\n  };\r\n\r\n  // Render user icon based on type\r\n  const getUserIcon = () => {\r\n    switch (user?.type) {\r\n      case 'student':\r\n        return <SchoolIcon />;\r\n      case 'faculty':\r\n        return <WorkIcon />;\r\n      case 'other':\r\n        return <PersonIcon />;\r\n      default:\r\n        return <PersonIcon />;\r\n    }\r\n  };\r\n\r\n  // Render category icon\r\n  const getCategoryIcon = (category: string) => {\r\n    if (category.includes('Course')) return <SchoolIcon />;\r\n    if (category.includes('Library') || category.includes('Campus')) return <LocalLibraryIcon />;\r\n    if (category.includes('OneCard')) return <CreditCardIcon />;\r\n    if (category.includes('Appointment')) return <EventIcon />;\r\n    if (category.includes('Commuter')) return <DirectionsBusIcon />;\r\n    if (category.includes('Places')) return <PlaceIcon />;\r\n    return <SchoolIcon />;\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ display: 'flex', flexDirection: 'column', height: '100vh' }}>\r\n      {/* App Bar */}\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton\r\n            edge=\"start\"\r\n            color=\"inherit\"\r\n            aria-label=\"menu\"\r\n            onClick={() => setDrawerOpen(true)}\r\n            sx={{ mr: 2 }}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          \r\n          <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\r\n            Clark University AI Chatbox\r\n          </Typography>\r\n          \r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"back to welcome\"\r\n            onClick={() => navigate('/')}\r\n          >\r\n            <ArrowBackIcon />\r\n          </IconButton>\r\n        </Toolbar>\r\n      </AppBar>\r\n\r\n      {/* Drawer for categories */}\r\n      <Drawer\r\n        anchor=\"left\"\r\n        open={drawerOpen}\r\n        onClose={() => setDrawerOpen(false)}\r\n      >\r\n        <Box sx={{ width: 300, p: 2 }}>\r\n          <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\r\n            {getUserIcon()}\r\n            <Typography variant=\"h6\" sx={{ ml: 1 }}>\r\n              {user && user.type ? `${user.type.charAt(0).toUpperCase() + user.type.slice(1)} Services` : 'Services'}\r\n            </Typography>\r\n          </Box>\r\n          \r\n          <Divider sx={{ mb: 2 }} />\r\n          \r\n          <List>\r\n            {getPresetMessages().map((category, index) => (\r\n              <React.Fragment key={index}>\r\n                <ListItem>\r\n                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\r\n                    {getCategoryIcon(category.category)}\r\n                    <Typography variant=\"subtitle1\" fontWeight=\"bold\" sx={{ ml: 1 }}>\r\n                      {category.category}\r\n                    </Typography>\r\n                  </Box>\r\n                </ListItem>\r\n                \r\n                {category.messages.map((msg, idx) => (\r\n                  <ListItem key={idx} sx={{ pl: 4 }}>\r\n                    <Button \r\n                      variant=\"text\" \r\n                      color=\"primary\"\r\n                      onClick={() => handlePresetMessage(msg)}\r\n                      sx={{ justifyContent: 'flex-start', textTransform: 'none' }}\r\n                    >\r\n                      {msg}\r\n                    </Button>\r\n                  </ListItem>\r\n                ))}\r\n                \r\n                {index < getPresetMessages().length - 1 && (\r\n                  <Divider sx={{ my: 1 }} />\r\n                )}\r\n              </React.Fragment>\r\n            ))}\r\n          </List>\r\n          \r\n          <Divider sx={{ my: 2 }} />\r\n          \r\n          <Button \r\n            variant=\"outlined\" \r\n            color=\"primary\" \r\n            fullWidth\r\n            onClick={() => {\r\n              startNewSession();\r\n              setMessages([{\r\n                id: Date.now().toString(),\r\n                text: getWelcomeMessage(user?.type || 'student'),\r\n                sender: 'ai',\r\n                timestamp: new Date()\r\n              }]);\r\n              setDrawerOpen(false);\r\n            }}\r\n          >\r\n            Start New Chat\r\n          </Button>\r\n        </Box>\r\n      </Drawer>\r\n\r\n      {/* Chat Area */}\r\n      <Box \r\n        sx={{ \r\n          flex: 1, \r\n          p: 2, \r\n          overflowY: 'auto',\r\n          bgcolor: 'background.default' \r\n        }}\r\n      >\r\n        <Container maxWidth=\"md\">\r\n          {messages.map((message) => (\r\n            <Box \r\n              key={message.id}\r\n              sx={{ \r\n                display: 'flex', \r\n                justifyContent: message.sender === 'user' ? 'flex-end' : 'flex-start',\r\n                mb: 2 \r\n              }}\r\n            >\r\n              <Paper \r\n                elevation={1}\r\n                sx={{ \r\n                  p: 2, \r\n                  maxWidth: '80%',\r\n                  borderRadius: 2,\r\n                  bgcolor: message.sender === 'user' ? 'primary.main' : 'background.paper',\r\n                  color: message.sender === 'user' ? 'white' : 'text.primary'\r\n                }}\r\n              >\r\n                <Typography variant=\"body1\">\r\n                  {message.text}\r\n                </Typography>\r\n                <Typography variant=\"caption\" color={message.sender === 'user' ? 'white' : 'text.secondary'}>\r\n                  {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\r\n                </Typography>\r\n              </Paper>\r\n            </Box>\r\n          ))}\r\n          \r\n          {isTyping && (\r\n            <Box sx={{ display: 'flex', justifyContent: 'flex-start', mb: 2 }}>\r\n              <Paper elevation={1} sx={{ p: 2, borderRadius: 2 }}>\r\n                <Typography>Clark AI is typing...</Typography>\r\n              </Paper>\r\n            </Box>\r\n          )}\r\n          \r\n          <div ref={messagesEndRef} />\r\n        </Container>\r\n      </Box>\r\n\r\n      {/* Input Area */}\r\n      <Box \r\n        component=\"form\"\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n          sendMessage();\r\n        }}\r\n        sx={{ \r\n          p: 2, \r\n          borderTop: 1, \r\n          borderColor: 'divider',\r\n          bgcolor: 'background.paper' \r\n        }}\r\n      >\r\n        <Container maxWidth=\"md\">\r\n          <Grid container spacing={1} alignItems=\"center\">\r\n            <Grid item xs>\r\n              <TextField\r\n                fullWidth\r\n                placeholder=\"Type your message here...\"\r\n                value={input}\r\n                onChange={(e) => setInput(e.target.value)}\r\n                onKeyPress={handleKeyPress}\r\n                variant=\"outlined\"\r\n                multiline\r\n                maxRows={3}\r\n              />\r\n            </Grid>\r\n            <Grid item>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                endIcon={<SendIcon />}\r\n                onClick={sendMessage}\r\n                disabled={!input.trim() || isTyping}\r\n              >\r\n                Send\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n          \r\n          <Box sx={{ mt: 1, display: 'flex', flexWrap: 'wrap', gap: 1 }}>\r\n            <Chip \r\n              label=\"Hi Clark AI\" \r\n              variant=\"outlined\" \r\n              onClick={() => handlePresetMessage('Hi Clark AI')} \r\n              clickable \r\n            />\r\n            <Chip \r\n              label=\"Library hours\" \r\n              variant=\"outlined\" \r\n              onClick={() => handlePresetMessage('What are the library hours?')} \r\n              clickable \r\n            />\r\n            <Chip \r\n              label=\"OneCard help\" \r\n              variant=\"outlined\" \r\n              onClick={() => handlePresetMessage('I need help with my OneCard')} \r\n              clickable \r\n            />\r\n            <Chip \r\n              label=\"Course registration\" \r\n              variant=\"outlined\" \r\n              onClick={() => handlePresetMessage('How do I register for courses?')} \r\n              clickable \r\n            />\r\n          </Box>\r\n        </Container>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}