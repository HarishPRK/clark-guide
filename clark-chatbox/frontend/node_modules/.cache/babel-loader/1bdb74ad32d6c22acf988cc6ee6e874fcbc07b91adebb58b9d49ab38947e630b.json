{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\haris\\\\clark-guide\\\\clark-chatbox\\\\frontend\\\\src\\\\components\\\\TimeSelector.tsx\";\nimport React from 'react';\nimport { Box, Paper, Typography, Grid, Button } from '@mui/material';\nimport AccessTimeIcon from '@mui/icons-material/AccessTime';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TimeSelector = ({\n  date,\n  onTimeSelect,\n  availableTimes\n}) => {\n  // Default time slots (1-hour blocks)\n  const defaultTimeSlots = [{\n    start: '08:00',\n    end: '09:00'\n  }, {\n    start: '09:00',\n    end: '10:00'\n  }, {\n    start: '10:00',\n    end: '11:00'\n  }, {\n    start: '11:00',\n    end: '12:00'\n  }, {\n    start: '12:00',\n    end: '13:00'\n  }, {\n    start: '13:00',\n    end: '14:00'\n  }, {\n    start: '14:00',\n    end: '15:00'\n  }, {\n    start: '15:00',\n    end: '16:00'\n  }, {\n    start: '16:00',\n    end: '17:00'\n  }, {\n    start: '17:00',\n    end: '18:00'\n  }, {\n    start: '18:00',\n    end: '19:00'\n  }, {\n    start: '19:00',\n    end: '20:00'\n  }, {\n    start: '20:00',\n    end: '21:00'\n  }];\n\n  // Use available times if provided, otherwise use default slots\n  const timeSlots = availableTimes || defaultTimeSlots;\n\n  // Format time display (convert from 24h to 12h format)\n  const formatTime = timeStr => {\n    const [hours, minutes] = timeStr.split(':').map(Number);\n    const period = hours >= 12 ? 'PM' : 'AM';\n    const formattedHours = hours % 12 || 12; // Convert 0 to 12 for 12 AM\n    return `${formattedHours}:${minutes.toString().padStart(2, '0')} ${period}`;\n  };\n\n  // Format the date for display\n  const formatDate = dateStr => {\n    const date = new Date(dateStr);\n    return date.toLocaleDateString('en-US', {\n      weekday: 'long',\n      month: 'long',\n      day: 'numeric'\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    sx: {\n      p: 2,\n      borderRadius: '12px',\n      boxShadow: '0 4px 12px rgba(0,0,0,0.1)',\n      animation: 'fadeIn 0.3s ease-out',\n      '@keyframes fadeIn': {\n        '0%': {\n          opacity: 0,\n          transform: 'translateY(10px)'\n        },\n        '100%': {\n          opacity: 1,\n          transform: 'translateY(0)'\n        }\n      }\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        alignItems: 'center',\n        mb: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(AccessTimeIcon, {\n        sx: {\n          mr: 1,\n          color: '#FF6B81'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"subtitle1\",\n        fontWeight: 600,\n        children: [\"Select a Time - \", formatDate(date)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body2\",\n      sx: {\n        mb: 2,\n        color: '#666'\n      },\n      children: \"All bookings are for 1-hour slots\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 1,\n      children: timeSlots.map((slot, index) => {\n        // Get just the hour value for display (e.g., \"2 pm\" instead of \"2:00 PM\")\n        const startHour = parseInt(slot.start.split(':')[0]);\n        const startPeriod = startHour >= 12 ? 'pm' : 'am';\n        const displayHour = startHour % 12 || 12;\n        return /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 4,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outlined\",\n            fullWidth: true,\n            onClick: () => onTimeSelect(slot.start, slot.end),\n            sx: {\n              py: 1.5,\n              borderColor: '#e0e0e0',\n              borderRadius: '12px',\n              color: '#333',\n              '&:hover': {\n                borderColor: '#FF6B81',\n                backgroundColor: 'rgba(255, 107, 129, 0.05)'\n              },\n              '&:focus': {\n                backgroundColor: 'rgba(255, 107, 129, 0.1)'\n              }\n            },\n            children: /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center',\n                width: '100%'\n              },\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body1\",\n                fontWeight: 600,\n                children: [displayHour, \" \", startPeriod]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 105,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), timeSlots.length === 0 && /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        py: 4,\n        textAlign: 'center',\n        color: '#666',\n        fontStyle: 'italic'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        children: \"No available time slots for this date.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        children: \"Please select another date.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_c = TimeSelector;\nexport default TimeSelector;\nvar _c;\n$RefreshReg$(_c, \"TimeSelector\");","map":{"version":3,"names":["React","Box","Paper","Typography","Grid","Button","AccessTimeIcon","jsxDEV","_jsxDEV","TimeSelector","date","onTimeSelect","availableTimes","defaultTimeSlots","start","end","timeSlots","formatTime","timeStr","hours","minutes","split","map","Number","period","formattedHours","toString","padStart","formatDate","dateStr","Date","toLocaleDateString","weekday","month","day","sx","p","borderRadius","boxShadow","animation","opacity","transform","children","display","alignItems","mb","mr","color","fileName","_jsxFileName","lineNumber","columnNumber","variant","fontWeight","container","spacing","slot","index","startHour","parseInt","startPeriod","displayHour","item","xs","fullWidth","onClick","py","borderColor","backgroundColor","flexDirection","width","length","textAlign","fontStyle","_c","$RefreshReg$"],"sources":["C:/Users/haris/clark-guide/clark-chatbox/frontend/src/components/TimeSelector.tsx"],"sourcesContent":["import React from 'react';\r\nimport { Box, Paper, Typography, Grid, Button } from '@mui/material';\r\nimport AccessTimeIcon from '@mui/icons-material/AccessTime';\r\n\r\ninterface TimeSelectorProps {\r\n  date: string;\r\n  onTimeSelect: (startTime: string, endTime: string) => void;\r\n  availableTimes?: { start: string; end: string }[];\r\n}\r\n\r\nconst TimeSelector: React.FC<TimeSelectorProps> = ({ date, onTimeSelect, availableTimes }) => {\r\n  // Default time slots (1-hour blocks)\r\n  const defaultTimeSlots = [\r\n    { start: '08:00', end: '09:00' },\r\n    { start: '09:00', end: '10:00' },\r\n    { start: '10:00', end: '11:00' },\r\n    { start: '11:00', end: '12:00' },\r\n    { start: '12:00', end: '13:00' },\r\n    { start: '13:00', end: '14:00' },\r\n    { start: '14:00', end: '15:00' },\r\n    { start: '15:00', end: '16:00' },\r\n    { start: '16:00', end: '17:00' },\r\n    { start: '17:00', end: '18:00' },\r\n    { start: '18:00', end: '19:00' },\r\n    { start: '19:00', end: '20:00' },\r\n    { start: '20:00', end: '21:00' }\r\n  ];\r\n\r\n  // Use available times if provided, otherwise use default slots\r\n  const timeSlots = availableTimes || defaultTimeSlots;\r\n\r\n  // Format time display (convert from 24h to 12h format)\r\n  const formatTime = (timeStr: string) => {\r\n    const [hours, minutes] = timeStr.split(':').map(Number);\r\n    const period = hours >= 12 ? 'PM' : 'AM';\r\n    const formattedHours = hours % 12 || 12; // Convert 0 to 12 for 12 AM\r\n    return `${formattedHours}:${minutes.toString().padStart(2, '0')} ${period}`;\r\n  };\r\n\r\n  // Format the date for display\r\n  const formatDate = (dateStr: string) => {\r\n    const date = new Date(dateStr);\r\n    return date.toLocaleDateString('en-US', {\r\n      weekday: 'long',\r\n      month: 'long',\r\n      day: 'numeric'\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Paper sx={{ \r\n      p: 2, \r\n      borderRadius: '12px',\r\n      boxShadow: '0 4px 12px rgba(0,0,0,0.1)',\r\n      animation: 'fadeIn 0.3s ease-out',\r\n      '@keyframes fadeIn': {\r\n        '0%': { opacity: 0, transform: 'translateY(10px)' },\r\n        '100%': { opacity: 1, transform: 'translateY(0)' }\r\n      },\r\n    }}>\r\n      <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\r\n        <AccessTimeIcon sx={{ mr: 1, color: '#FF6B81' }} />\r\n        <Typography variant=\"subtitle1\" fontWeight={600}>\r\n          Select a Time - {formatDate(date)}\r\n        </Typography>\r\n      </Box>\r\n      \r\n      <Typography variant=\"body2\" sx={{ mb: 2, color: '#666' }}>\r\n        All bookings are for 1-hour slots\r\n      </Typography>\r\n      \r\n      <Grid container spacing={1}>\r\n        {timeSlots.map((slot, index) => {\r\n          // Get just the hour value for display (e.g., \"2 pm\" instead of \"2:00 PM\")\r\n          const startHour = parseInt(slot.start.split(':')[0]);\r\n          const startPeriod = startHour >= 12 ? 'pm' : 'am';\r\n          const displayHour = startHour % 12 || 12;\r\n          \r\n          return (\r\n            <Grid item xs={4} key={index}>\r\n              <Button\r\n                variant=\"outlined\"\r\n                fullWidth\r\n                onClick={() => onTimeSelect(slot.start, slot.end)}\r\n                sx={{\r\n                  py: 1.5,\r\n                  borderColor: '#e0e0e0',\r\n                  borderRadius: '12px',\r\n                  color: '#333',\r\n                  '&:hover': {\r\n                    borderColor: '#FF6B81',\r\n                    backgroundColor: 'rgba(255, 107, 129, 0.05)',\r\n                  },\r\n                  '&:focus': {\r\n                    backgroundColor: 'rgba(255, 107, 129, 0.1)',\r\n                  }\r\n                }}\r\n              >\r\n                <Box sx={{ \r\n                  display: 'flex', \r\n                  flexDirection: 'column',\r\n                  alignItems: 'center',\r\n                  width: '100%'\r\n                }}>\r\n                  <Typography variant=\"body1\" fontWeight={600}>\r\n                    {displayHour} {startPeriod}\r\n                  </Typography>\r\n                </Box>\r\n              </Button>\r\n            </Grid>\r\n          );\r\n        })}\r\n      </Grid>\r\n      \r\n      {timeSlots.length === 0 && (\r\n        <Box sx={{ \r\n          py: 4, \r\n          textAlign: 'center', \r\n          color: '#666',\r\n          fontStyle: 'italic'\r\n        }}>\r\n          <Typography variant=\"body2\">\r\n            No available time slots for this date.\r\n          </Typography>\r\n          <Typography variant=\"body2\">\r\n            Please select another date.\r\n          </Typography>\r\n        </Box>\r\n      )}\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default TimeSelector;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,GAAG,EAAEC,KAAK,EAAEC,UAAU,EAAEC,IAAI,EAAEC,MAAM,QAAQ,eAAe;AACpE,OAAOC,cAAc,MAAM,gCAAgC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAQ5D,MAAMC,YAAyC,GAAGA,CAAC;EAAEC,IAAI;EAAEC,YAAY;EAAEC;AAAe,CAAC,KAAK;EAC5F;EACA,MAAMC,gBAAgB,GAAG,CACvB;IAAEC,KAAK,EAAE,OAAO;IAAEC,GAAG,EAAE;EAAQ,CAAC,EAChC;IAAED,KAAK,EAAE,OAAO;IAAEC,GAAG,EAAE;EAAQ,CAAC,EAChC;IAAED,KAAK,EAAE,OAAO;IAAEC,GAAG,EAAE;EAAQ,CAAC,EAChC;IAAED,KAAK,EAAE,OAAO;IAAEC,GAAG,EAAE;EAAQ,CAAC,EAChC;IAAED,KAAK,EAAE,OAAO;IAAEC,GAAG,EAAE;EAAQ,CAAC,EAChC;IAAED,KAAK,EAAE,OAAO;IAAEC,GAAG,EAAE;EAAQ,CAAC,EAChC;IAAED,KAAK,EAAE,OAAO;IAAEC,GAAG,EAAE;EAAQ,CAAC,EAChC;IAAED,KAAK,EAAE,OAAO;IAAEC,GAAG,EAAE;EAAQ,CAAC,EAChC;IAAED,KAAK,EAAE,OAAO;IAAEC,GAAG,EAAE;EAAQ,CAAC,EAChC;IAAED,KAAK,EAAE,OAAO;IAAEC,GAAG,EAAE;EAAQ,CAAC,EAChC;IAAED,KAAK,EAAE,OAAO;IAAEC,GAAG,EAAE;EAAQ,CAAC,EAChC;IAAED,KAAK,EAAE,OAAO;IAAEC,GAAG,EAAE;EAAQ,CAAC,EAChC;IAAED,KAAK,EAAE,OAAO;IAAEC,GAAG,EAAE;EAAQ,CAAC,CACjC;;EAED;EACA,MAAMC,SAAS,GAAGJ,cAAc,IAAIC,gBAAgB;;EAEpD;EACA,MAAMI,UAAU,GAAIC,OAAe,IAAK;IACtC,MAAM,CAACC,KAAK,EAAEC,OAAO,CAAC,GAAGF,OAAO,CAACG,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,MAAM,CAAC;IACvD,MAAMC,MAAM,GAAGL,KAAK,IAAI,EAAE,GAAG,IAAI,GAAG,IAAI;IACxC,MAAMM,cAAc,GAAGN,KAAK,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC;IACzC,OAAO,GAAGM,cAAc,IAAIL,OAAO,CAACM,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,IAAIH,MAAM,EAAE;EAC7E,CAAC;;EAED;EACA,MAAMI,UAAU,GAAIC,OAAe,IAAK;IACtC,MAAMnB,IAAI,GAAG,IAAIoB,IAAI,CAACD,OAAO,CAAC;IAC9B,OAAOnB,IAAI,CAACqB,kBAAkB,CAAC,OAAO,EAAE;MACtCC,OAAO,EAAE,MAAM;MACfC,KAAK,EAAE,MAAM;MACbC,GAAG,EAAE;IACP,CAAC,CAAC;EACJ,CAAC;EAED,oBACE1B,OAAA,CAACN,KAAK;IAACiC,EAAE,EAAE;MACTC,CAAC,EAAE,CAAC;MACJC,YAAY,EAAE,MAAM;MACpBC,SAAS,EAAE,4BAA4B;MACvCC,SAAS,EAAE,sBAAsB;MACjC,mBAAmB,EAAE;QACnB,IAAI,EAAE;UAAEC,OAAO,EAAE,CAAC;UAAEC,SAAS,EAAE;QAAmB,CAAC;QACnD,MAAM,EAAE;UAAED,OAAO,EAAE,CAAC;UAAEC,SAAS,EAAE;QAAgB;MACnD;IACF,CAAE;IAAAC,QAAA,gBACAlC,OAAA,CAACP,GAAG;MAACkC,EAAE,EAAE;QAAEQ,OAAO,EAAE,MAAM;QAAEC,UAAU,EAAE,QAAQ;QAAEC,EAAE,EAAE;MAAE,CAAE;MAAAH,QAAA,gBACxDlC,OAAA,CAACF,cAAc;QAAC6B,EAAE,EAAE;UAAEW,EAAE,EAAE,CAAC;UAAEC,KAAK,EAAE;QAAU;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACnD3C,OAAA,CAACL,UAAU;QAACiD,OAAO,EAAC,WAAW;QAACC,UAAU,EAAE,GAAI;QAAAX,QAAA,GAAC,kBAC/B,EAACd,UAAU,CAAClB,IAAI,CAAC;MAAA;QAAAsC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACV,CAAC,eAEN3C,OAAA,CAACL,UAAU;MAACiD,OAAO,EAAC,OAAO;MAACjB,EAAE,EAAE;QAAEU,EAAE,EAAE,CAAC;QAAEE,KAAK,EAAE;MAAO,CAAE;MAAAL,QAAA,EAAC;IAE1D;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAY,CAAC,eAEb3C,OAAA,CAACJ,IAAI;MAACkD,SAAS;MAACC,OAAO,EAAE,CAAE;MAAAb,QAAA,EACxB1B,SAAS,CAACM,GAAG,CAAC,CAACkC,IAAI,EAAEC,KAAK,KAAK;QAC9B;QACA,MAAMC,SAAS,GAAGC,QAAQ,CAACH,IAAI,CAAC1C,KAAK,CAACO,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACpD,MAAMuC,WAAW,GAAGF,SAAS,IAAI,EAAE,GAAG,IAAI,GAAG,IAAI;QACjD,MAAMG,WAAW,GAAGH,SAAS,GAAG,EAAE,IAAI,EAAE;QAExC,oBACElD,OAAA,CAACJ,IAAI;UAAC0D,IAAI;UAACC,EAAE,EAAE,CAAE;UAAArB,QAAA,eACflC,OAAA,CAACH,MAAM;YACL+C,OAAO,EAAC,UAAU;YAClBY,SAAS;YACTC,OAAO,EAAEA,CAAA,KAAMtD,YAAY,CAAC6C,IAAI,CAAC1C,KAAK,EAAE0C,IAAI,CAACzC,GAAG,CAAE;YAClDoB,EAAE,EAAE;cACF+B,EAAE,EAAE,GAAG;cACPC,WAAW,EAAE,SAAS;cACtB9B,YAAY,EAAE,MAAM;cACpBU,KAAK,EAAE,MAAM;cACb,SAAS,EAAE;gBACToB,WAAW,EAAE,SAAS;gBACtBC,eAAe,EAAE;cACnB,CAAC;cACD,SAAS,EAAE;gBACTA,eAAe,EAAE;cACnB;YACF,CAAE;YAAA1B,QAAA,eAEFlC,OAAA,CAACP,GAAG;cAACkC,EAAE,EAAE;gBACPQ,OAAO,EAAE,MAAM;gBACf0B,aAAa,EAAE,QAAQ;gBACvBzB,UAAU,EAAE,QAAQ;gBACpB0B,KAAK,EAAE;cACT,CAAE;cAAA5B,QAAA,eACAlC,OAAA,CAACL,UAAU;gBAACiD,OAAO,EAAC,OAAO;gBAACC,UAAU,EAAE,GAAI;gBAAAX,QAAA,GACzCmB,WAAW,EAAC,GAAC,EAACD,WAAW;cAAA;gBAAAZ,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAChB;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACV;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACA;QAAC,GA7BYM,KAAK;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OA8BtB,CAAC;MAEX,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,EAENnC,SAAS,CAACuD,MAAM,KAAK,CAAC,iBACrB/D,OAAA,CAACP,GAAG;MAACkC,EAAE,EAAE;QACP+B,EAAE,EAAE,CAAC;QACLM,SAAS,EAAE,QAAQ;QACnBzB,KAAK,EAAE,MAAM;QACb0B,SAAS,EAAE;MACb,CAAE;MAAA/B,QAAA,gBACAlC,OAAA,CAACL,UAAU;QAACiD,OAAO,EAAC,OAAO;QAAAV,QAAA,EAAC;MAE5B;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAAC,eACb3C,OAAA,CAACL,UAAU;QAACiD,OAAO,EAAC,OAAO;QAAAV,QAAA,EAAC;MAE5B;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACV,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACI,CAAC;AAEZ,CAAC;AAACuB,EAAA,GAzHIjE,YAAyC;AA2H/C,eAAeA,YAAY;AAAC,IAAAiE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}